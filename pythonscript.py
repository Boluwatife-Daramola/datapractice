# -*- coding: utf-8 -*-
"""F7 Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aTs44VUsmZgndAFtEyrkx5r3xpTiGtgD
"""

#mounting my google drive
from google.colab import drive
drive.mount('/content/drive')

##importing pandas, matplotlib and numpy libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

# reading the dataframe from my google drive

SalesData = pd.read_csv('/content/drive/MyDrive/Retail dataset of a global superstore F7.csv')

#calling the dataframe out
SalesData

#making a copy of the dataset
retaildata = SalesData.copy()

#making a copy of the dataset again
retail = retaildata.copy()

#returns top 5 of the dataset
retail.head(5)

#returns bottom 5 of the dataset
retail.tail(5)

#returns any 5 samples of the dataset
retail.sample(5)

"""Data Cleaning and feature enrichment of Retail Dataset"""

#returns descriptive stats for numerical columns
retail.describe()

#returns no of rows and columns
retail.shape

#returns column layout
retail.columns

#returns datatype of columns and other info
retail.info()

#checks for missing data or empty spaces for each column
retail.isnull().any()

#checks for no of missing data or empty spaces for each column
retail.isnull().sum()

#this code did not work
#retail.loc[retail['Country'] == 'NaN']

#returns the countries under Country column
retail.Country.unique()

#returns the countries under Country column
retail['Country'].unique()

#replaces empty spaces with United States
retail['Country'] = retail['Country'].fillna('United States')

#returns the countries under Country column
retail['Country'].unique()

#convert date to date datatype
retail['Order Date'] = pd.to_datetime(retail['Order Date'])

#convert date to a uniform date datatype (since date format is mixed up in dataset)
#retail['Order Date'] = pd.to_datetime(retail['Order Date'], infer_datetime_format= True, infer_datetime_format= True, errors= 'ignore')

retail.info()

#returns any random 5 from the dataset
retail.sample(5)

retail['State'] = retail['State'].str.title()
retail['State']

retail.State.unique()

retail['City'] = retail['City'].str.title()
retail['City']

retail.City.unique()

#to check for duplicated rows
duplicates_row = retail[retail.duplicated()]
duplicates_row

#Extracting the month name and creating a new column
retail['Month Name'] = retail['Order Date'].dt.month_name()

#returns the short form for month
retail['Month Name'] = retail['Month Name'].str[:3]
retail['Month Name']

#returns the months in Month Name column
retail['Month Name'].unique()

#Extracting the quarters and creating a new column
retail['Quarter'] = retail['Order Date'].dt.quarter

#Extracting the years and creating a new column
retail['Year'] = retail['Order Date'].dt.year

#Split the first and last names
retail['FirstName'] = retail['Customer Name'].str.split(' ', 1).str[0]
retail['LastName'] = retail['Customer Name'].str.split(' ', 1).str[1]

#returns the last names in the LastName column
retail['LastName'].unique()

#this code does not work
#retail.loc[retail['LastName'] == 'nan']

#extracting the row that has empty spaces as last name
#retail.iloc[1489:1490]
retail.loc[1489:1489]

#replaceing first and last names
retail['FirstName'].replace('Corey-Lock', 'Corey', inplace=True)
#this code does not work
retail['LastName'].replace('NaN', 'Lock', inplace=True)

#this code does not work
retail.loc[retail['LastName'] == 'NaN']

#this code does not work
retail.loc[retail['LastName'] == 'nan']

#this code does not work
retail["LastName"] = retail["LastName"].replace(to_replace = 'NaN', value = 'Lock')

#this code does not work
mask = retail['LastName'] == 'NaN'
retail.loc[mask, 'LastName'] = 'Lock'

#this code does not work
overwrite = {'NaN': 'Lock'}
retail['LastName'] = retail['LastName'].map(overwrite).fillna(retail['LastName'])

#extracting the cell with empty space as last name
retail["LastName"] [1489]

#replaceing last name
retail['LastName'] [1489] = 'Lock'
retail['LastName'] [1489]

#fixing the row that has empty spaces with a name
#retail.iloc[1489:1490]
retail.iloc[1489:1490]

#returns column layout
retail.columns

#renaming columns
retail.rename(columns ={'Row ID': 'RowID', 'Order ID': 'OrderID', 'Order Date': 'OrderDate', 'Ship Mode': 'ShipMode', 'Customer ID': 'CustomerID',
                        'Customer Name': 'CustomerName', 'Postal Code': 'PostalCode', 'Product ID': 'ProductID', 'Unit Sale': 'UnitSale',
                        'Unit Cost': 'UnitCost', 'Month Name': 'MonthName'}, inplace=True)

#returns column layout
retail.columns

#returns first two rows
retail.head(2)

#calculating TotalSale and ToalCost and creating a column
retail['TotalSale'] = retail['UnitSale'] * retail['Quantity']
retail['TotalCost'] = retail['UnitCost'] * retail['Quantity']

#calculating ProfitPerItem and TotalProfit and creating a column
retail['ProfitPerItem'] = retail['UnitSale'] - retail['UnitCost']
retail['TotalProfit'] = retail['TotalSale'] - retail['TotalCost']

#returns the countries under Country column
retail.Country.unique()

#dropping some columns
retail.drop(['CustomerName', 'Country'], axis=1, inplace=True)

#returns column layout
retail.columns

#Rearrage the columns
retail = retail[['RowID', 'OrderID', 'OrderDate', 'Year', 'MonthName', 'Quarter', 'ShipMode', 'CustomerID', 'FirstName', 'LastName', 'Segment',
       'City', 'State', 'PostalCode', 'Region', 'ProductID', 'Category', 'Quantity', 'UnitSale', 'UnitCost', 'ProfitPerItem', 'TotalSale', 'TotalCost',
       'TotalProfit']]

#returns any random 2 from the dataset
retail.sample(2)

#returns descriptive stats for numerical columns
retail.describe()

"""Question 1

Calculate the total sales from the dataset
"""

totalsales = retail['TotalSale'].sum()
totalsales = round(totalsales, 2)
print(f'The total sales from the dataset is £{totalsales}')

"""Question 2

Determine the average quantity sold for each product category
"""

#returns the names of Category in the dataset
retail.Category.unique()

#creating a table for only Technology as a Category
tech_table = retail.loc[retail['Category'] == 'Technology']
tech_table

#creating a table for only Office Supplies as a Category
officesup_table = retail.loc[retail['Category'] == 'Office Supplies']
officesup_table

#creating a table for only Furniture as a Category
furn_table = retail.loc[retail['Category'] == 'Furniture']
furn_table

#creating table for each category
furn_table = retail.loc[retail['Category'] == 'Furniture']
officesup_table = retail.loc[retail['Category'] == 'Office Supplies']
tech_table = retail.loc[retail['Category'] == 'Technology']

#AQSF = average quantity sold for furniture
AQSF = furn_table['Quantity'].mean()
AQSF = round(AQSF, 2)
print(f'The average quantity sold for furniture is £{AQSF}')

#AQSO = average quantity sold for office supplies
AQSO = officesup_table['Quantity'].mean()
AQSO = round(AQSO, 2)
print(f'The average quantity sold for office supplies is £{AQSO}')

#AQST = average quantity sold for technology
AQST = tech_table['Quantity'].mean()
AQST = round(AQST, 2)
print(f'The average quantity sold for technology is £{AQST}')

"""Question 3

Identify the most frequently used ship mode.
"""

#returns the list of Ship Mode and how many times they appear in the dataset
retail['ShipMode'].value_counts()

#mfusm = most frequently used ship mode
mfusm = retail['ShipMode'].mode()
print('The most frequently used ship mode is:')
print(mfusm)

"""Question 4

Find the top 5 customers based on their total sales.
"""

#retail['TotalSale'].value_counts()
#retail['TotalSale'].value_counts().head(5)
#??????????

retail['TotalSale'].nlargest(n = 5)

retail.sort_values('TotalSale', ascending=False).head(5)

"""Question 5

Count the number of orders for each region.
"""

#lists the names of the Region in the dataset
retail.Region.unique()

#creating table for each region
s_table = retail.loc[retail['Region'] == 'South']
w_table = retail.loc[retail['Region'] == 'West']
c_table = retail.loc[retail['Region'] == 'Central']
e_table = retail.loc[retail['Region'] == 'East']

#returns the list of OrderID for only South Region and how many times they appear in the dataset
s_table['OrderID'].value_counts()

#returns the list of OrderID for only West Region and how many times they appear in the dataset
w_table['OrderID'].value_counts()

#returns the list of OrderID for only Central Region and how many times they appear in the dataset
c_table['OrderID'].value_counts()

#returns the list of OrderID for only East Region and how many times they appear in the dataset
e_table['OrderID'].value_counts()

#counts the number of orders for each region
#nos = no of orders for south
#now = no of orders for west
#noc = no of orders for central
#noe = no of orders for east
nos = s_table['OrderID'].value_counts().count()
now = w_table['OrderID'].value_counts().count()
noc = c_table['OrderID'].value_counts().count()
noe = e_table['OrderID'].value_counts().count()
print('The number of orders from South is',nos)
print('The number of orders from West is',now)
print('The number of orders from Central is',noc)
print('The number of orders from East is',noe)

"""Question 6

Calculate the average sales per quantity for the each category.
"""

#recalls the Category tables
furn_table = retail.loc[retail['Category'] == 'Furniture']
officesup_table = retail.loc[retail['Category'] == 'Office Supplies']
tech_table = retail.loc[retail['Category'] == 'Technology']

#ASPQF = average sales per quantity for furniture
ASPQF = furn_table['UnitSale'].sum() / furn_table['Quantity'].sum()
ASPQF = round(ASPQF, 2)
print(f'The average sales per quantity for furniture is £{ASPQF}')

#ASPQO = average sales per quantity for office supplies
ASPQO = officesup_table['UnitSale'].sum() / officesup_table['Quantity'].sum()
ASPQO = round(ASPQO, 2)
print(f'The average sales per quantity for office supplies is £{ASPQO}')

#ASPQT = average sales per quantity for technology
ASPQT = tech_table['UnitSale'].sum() / tech_table['Quantity'].sum()
ASPQT = round(ASPQT, 2)
print(f'The average sales per quantity for technology is £{ASPQT}')

"""Question 7

Identify the order with the highest profit.
"""

#returns the list of orders and how many times they appear in the dataset
retail.OrderID.value_counts()

#groups the dataset based on OrderID and aggregates their Total Profit
#retail.groupby('OrderID').sum()
#retail.groupby('OrderID')['TotalProfit'].agg(['sum','count'])
retail.groupby('OrderID').agg({'TotalProfit': ['sum','count']})

#groups the dataset based on OrderID and aggregates their Total Profit and returns the highest Total Profit
#retail.groupby(['OrderID'])['TotalProfit'].sum().sort_values(ascending= False).head(1)
#owhp = order with the highest profit
owhp = retail.groupby(['OrderID'])['TotalProfit'].sum().sort_values(ascending= False).nlargest(n = 1)
print(f'The order with the highest profit is stated below: \n{owhp}')

"""Question 8

Count the number of orders that were shipped to the state of California.
"""

#lists the names of the State in the dataset
retail.State.unique()

#returns dataset with only California as the State
cal_state = retail.loc[retail['State'] == 'California']
cal_state

#nots = No of orders that were shipped
nots = cal_state['OrderID'].value_counts()
nots

nots.count()
print('The number of orders that were shipped to the state of California are', nots.count())

"""Question 9

Create a bar chart to visualize the total sales for each product category.
"""

#creating a table for Category and Total Sale
cts = retail[['Category', 'TotalSale']]
cts

from matplotlib import pyplot as plt
import seaborn as sns
cts.groupby('Category').size().plot(kind='bar', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

#creating a bar chart for Total Sale per Category
plt.bar(cts['Category'], cts['TotalSale'], color= 'teal', width = 0.3)
plt.title('Total Sale per Category', fontsize=16, color= 'green')
plt.xlabel('Category', fontsize=14, color= 'red')
plt.ylabel('Total Sale', fontsize=14, color= 'purple')
plt.grid(False)
plt.show()

"""Question 10

Generate a scatter plot to explore the relationship between sales and profit for each order.
"""

#creating a table for Unit Sale and Profit Per Item
uspi = retail[['UnitSale', 'ProfitPerItem']]
uspi

from matplotlib import pyplot as plt
uspi.plot(kind='scatter', x='ProfitPerItem', y='UnitSale', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

#creating a scatter plot for Unit Sale and Profit Per Item
plt.scatter(uspi['ProfitPerItem'], uspi['UnitSale'], color='teal')
plt.title('Profit Per Item Vs Unit Sale', fontsize=14, color='green')
plt.xlabel('Profit Per Item', fontsize=14, color='blue')
plt.ylabel('Unit Sale', fontsize=14, color='red')
plt.grid(False)
plt.show()

"""Question 11

Design a box plot to compare the distribution of quantity sold across different regions.
"""

#creating a table for Quantity sold across different Regions
rqs = retail[['Region', 'Quantity']]
rqs

#creating a box plot for Quantity sold across different Regions
retail.boxplot(column = 'Quantity', by = 'Region', fontsize = 'large', figsize = (7,7), grid = False, xlabel = 'Region', ylabel = 'Quantity')

